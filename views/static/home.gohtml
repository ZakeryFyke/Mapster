{{define "yield"}}


<script src="https://www.gstatic.com/firebasejs/3.7.5/firebase.js"></script>
<script>
//This probably shouldn't be here, but whatever
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyDtoSphTd9081SpWkSi5kcRG_7tM1V-jdA",
    authDomain: "mapster-8f210.firebaseapp.com",
    databaseURL: "https://mapster-8f210.firebaseio.com",
    projectId: "mapster-8f210",
    storageBucket: "mapster-8f210.appspot.com",
    messagingSenderId: "320669222015"
  };
  firebase.initializeApp(config);
</script>

<script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAGGxruyyZKhj9fzWk-hTDohDsU8cfIi3s&libraries=places,geometry&callback=initMap">
</script>

  <h1><center>Welcome to Mapster!<center></h1>
  <p><center>A roadtrip augmentation tool<center></p>
  <input type="text", id ="start">
  <br>
  <br>
  <input type="text", id="end">
  <br>
  <br>
  <select id = "options">
    <option>lodging</option>
    <option>restaurant</option>
    <option>museum</option>
  </select>
  <br>
  <br>
  <input id ="router" type="button" value="Route!" onclick = "Route()"/>
  <br>
  <br>
  <style>
    html,
    body {
      font-family:  Arial, sans-serif;
      height: 100%;
      margin: 0;
      padding: 10px;
    }

    #map {
      height: 100%;
      width: 100%;
    }
  </style>



  <body>
    <div id="map" style="width:75%;height:600px;"></div>
    <script>
      var map;

      // initMap initilizes the google map centered at the (hard coded) Lat/Lng
      function initMap() {
        var mapProp= {
          center: new google.maps.LatLng(33.7552,-101.8552),
          zoom: 7,
        };
        map = new google.maps.Map(document.getElementById("map"), mapProp);
      }

    </script>

    <script async defer>
      var directionsDisplay;
      var directionsService;
      var markersArray = [];
      var infowindow;
      var startloc;
      var service;
      var item = document.getElementById("options");
      var k = 0;

      // Route will create new direction service, and also it will remove
      // all markers that exist if a previous route has been constructed.
      function Route() {
        var stepDisplay = new google.maps.InfoWindow;
        if(directionsDisplay != null) {
          directionsDisplay.setMap(null);
        }
        directionsService = new google.maps.DirectionsService;
        directionsDisplay = new google.maps.DirectionsRenderer;
        directionsDisplay.setMap(map);

        for(var i = 0; i < markersArray.length; i++) {
          markersArray[i].setMap(null);
        }
        markersArray = [];

        calculateAndDisplayRoute(directionsService, directionsDisplay, markersArray, stepDisplay, map);
      }

      // calculateAndDisplayRoute will route between point A and B and will
      // call the functionality to add the markers along the route.
      function calculateAndDisplayRoute(directionsService, directionsDisplay, markerArray, stepDisplay, map) {
        directionsService.route({
          origin: document.getElementById('start').value,
          destination: document.getElementById('end').value,
          // The default is driving, but this provides clarity and possible later flexibility
          travelMode: 'DRIVING'
        }, function(response, status) {
          if (status === 'OK') {
            directionsDisplay.setDirections(response);
            showSteps(response, markerArray, stepDisplay, map);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }

      //showSets will go through each directionResult instreaction and do the
      //nearby search at those points.  This will be changed to be equally
      //incremental points along the route instead of direction changes.
      // google.maps.geometry.spherical.computeDistanceBetween (latLngA, latLngB);

      function showSteps(directionResult, markerArray, stepDisplay, map) {

        var myRoute = directionResult.routes[0].legs[0];
        var start = myRoute.steps[0].start_location;
        var end = myRoute.steps[myRoute.steps.length-1].end_location;

        infowindow = new google.maps.InfoWindow();

        //item = document.getElementById("options");
        service = new google.maps.places.PlacesService(map);
;
        for(k; k < myRoute.steps.length-1; k++) {

          startloc = myRoute.steps[k].start_location;
          var endpos = myRoute.steps[k+1].start_location;


          if(shortDistance(startloc, endpos, start, end)) {
            setTimeout(function(k){
              return function() {
                service.nearbySearch({
                location: startloc,
                radius: 15000,
                type: item.options[item.selectedIndex].text
                }, callback);
              };
            }(k), 1000*k);
            continue;

          }

          while(longDistance(startloc, endpos, start, end)) {
            setTimeout(nearbyClosure(startloc, service, item, callback), 1000*k);
            var heading = google.maps.geometry.spherical.computeHeading(startloc, endpos);
            startloc = google.maps.geometry.spherical.computeOffset(startloc, 80000, heading);
        }

      }

    }

    //callback function to createMarkers for the nearby search
    function callback(results, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
          for (var i = 0; i < results.length; i++) {
            createMarker(results[i]);
          }
        }
        if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
          console.log("over");
        }
    }

    // createMarker takes in a place and creates the infowindow markersArray.
    // places markers on the map and adds to the markersArray.
    function createMarker(place) {
      var placeLoc = place.geometry.location;
      if(place.rating != null && place.photos != null) {
        var marker = new google.maps.Marker({
          map: map,
          position: place.geometry.location
          //icon: place.photos[0].getUrl({'maxWidth': 35, 'maxHeight': 35})
        });
        //console.log(marker.position.toString());
        //photUrl is the location of the photo to be placed in the
        var photoUrl = place.photos[0].getUrl({'maxWidth': 250, 'maxHeight': 250});
        var contentString =  "<img src=" + photoUrl + ">"+"<br />"+ place.name + "<br />Rating: " + place.rating;

        // addListener for click marker
        google.maps.event.addListener(marker, 'click', function() {
          infowindow.setContent(contentString);
          infowindow.open(map, this);
        });

        markersArray.push(marker);
      }
    }

    function nearbyClosure(startloc, service, item, callback) {
      return function() {
        service.nearbySearch({
          location: startloc,
          radius: 15000,
          type: item.options[item.selectedIndex].text
        }, callback);
      };
    }

    // WTF at these variable names?
    function shortDistance(startloc, endpos, start, end) {
      return (google.maps.geometry.spherical.computeDistanceBetween(startloc, endpos) < 80000 &&
        google.maps.geometry.spherical.computeDistanceBetween(startloc, start) > 300000 &&
        google.maps.geometry.spherical.computeDistanceBetween(startloc, end) > 300000);
    }

    // again, wtf?
    function longDistance(startloc, endpos, start, end) {
      return (google.maps.geometry.spherical.computeDistanceBetween(startloc, endpos) > 80000 &&
        google.maps.geometry.spherical.computeDistanceBetween(startloc, start) > 300000 &&
        google.maps.geometry.spherical.computeDistanceBetween(startloc, end) > 300000);
    }

    </script>
  </body>
{{end}}
